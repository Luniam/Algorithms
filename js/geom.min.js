function getIntersections(a,c,b){eDistAtoB=Math.sqrt(Math.pow(c[0]-a[0],2)+Math.pow(c[1]-a[1],2));d=[(c[0]-a[0])/eDistAtoB,(c[1]-a[1])/eDistAtoB];t=d[0]*(b[0]-a[0])+d[1]*(b[1]-a[1]);var e={coords:[],onLine:!1};e.coords[0]=t*d[0]+a[0];e.coords[1]=t*d[1]+a[1];eDistCtoE=Math.sqrt(Math.pow(e.coords[0]-b[0],2)+Math.pow(e.coords[1]-b[1],2));if(eDistCtoE<b[2]){dt=Math.sqrt(Math.pow(b[2],2)-Math.pow(eDistCtoE,2));b={coords:[],onLine:!1};b.coords[0]=(t-dt)*d[0]+a[0];b.coords[1]=(t-dt)*d[1]+a[1];b.onLine=is_on(a,
c,b.coords);var f={coords:[],onLine:!1};f.coords[0]=(t+dt)*d[0]+a[0];f.coords[1]=(t+dt)*d[1]+a[1];f.onLine=is_on(a,c,f.coords);return{points:{intersection1:b,intersection2:f},pointOnLine:e}}parseInt(eDistCtoE);parseInt(b[2]);return{points:!1,pointOnLine:e}}function distance(a,c){return Math.sqrt(Math.pow(a[0]-c[0],2)+Math.pow(a[1]-c[1],2))}function is_on(a,c,b){return distance(a,b)+distance(b,c)==distance(a,c)}
function getAngles(a,c,b){angleAB=Math.atan2(c[1]-a[1],c[0]-a[0]);angleAC=Math.atan2(b[1]-a[1],b[0]-a[0]);angleBC=Math.atan2(c[1]-b[1],c[0]-b[0]);angleA=Math.abs(180/Math.PI*(angleAB-angleAC));angleB=Math.abs(180/Math.PI*(angleAB-angleBC));return[angleA,angleB]}var rad=20;
function getThePoints(a){var c=[],b=[],e=[],f=[],g=[];b.push(a[0].xVal);b.push(a[0].yVal);e.push(a[1].xVal);e.push(a[1].yVal);f.push(a[0].xVal);f.push(a[0].yVal);f.push(rad);g.push(a[1].xVal);g.push(a[1].yVal);g.push(rad);calculatedPoints1=getIntersections(b,e,f);calculatedPoints2=getIntersections(b,e,g);considered1=calculatedPoints1.points.intersection2;considered2=calculatedPoints2.points.intersection1;c.push(considered1.coords[0]);c.push(considered1.coords[1]);c.push(considered2.coords[0]);c.push(considered2.coords[1]);
return c};
